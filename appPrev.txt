import json
import pickle
from flask import Flask, request, app, jsonify, url_for, render_template
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression

app = Flask(__name__)

# Dummy data and model for demonstration
scaler = StandardScaler()
regression = LinearRegression()

# Save the scaler
with open('scaling.pkl', 'wb') as f:
    pickle.dump(scaler, f)

# Save the regression model
with open('regmodel.pkl', 'wb') as f:
    pickle.dump(regression, f)

# Reload the scaler
with open('scaling.pkl', 'rb') as f:
    scaler = pickle.load(f)

# Reload the regression model
with open('regmodel.pkl', 'rb') as f:
    regression = pickle.load(f)

## Flask app code follows here
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/predict_api', methods=['POST'])
def predict_api():
    data = request.json['data']
    print(data)
    print(np.array(list(data.values())).reshape(1, -1))
    new_data = scaler.transform(np.array(list(data.values())).reshape(1, -1))
    output = regression.predict(new_data)
    print(output[0])
    return jsonify(output[0])

# @app.route('/predict', methods=['POST'])
# def predict():
#     data = [float(x) for x in request.form.values()]
#     final_input = scaler.transform(np.array(data).reshape(1, -1))
#     print(final_input)
#     output = regression.predict(final_input)[0]
#     return render_template("home.html", prediction_text="The House price prediction is {}".format(output))

if __name__ == "__main__":
    app.run(debug=True)

   
     

